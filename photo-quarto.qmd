---
title: "photo-quarto"
jupyter: python3
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

```{python}

from pathlib import Path
from PIL import Image
import itertools
import re
import PIL

```

```{python}

im = Image.open("photos/IMG_20230723_112716.jpg")

```

```{python}

print(im.format, im.size, im.mode)

```

```{python}

def chunks(lst, n):
    """Yield successive n-sized chunks from lst."""
    for i in range(0, len(lst), n):
        yield lst[i:i + n]

def add_margin(pil_img, top, right, bottom, left, color):
    width, height = pil_img.size
    new_width = width + right + left
    new_height = height + top + bottom
    result = Image.new(pil_img.mode, (new_width, new_height), color)
    result.paste(pil_img, (left, top))
    return result

# image size
xsize, ysize = im.size

# Merge 2 images
def merge(im1_file, im2_file):
    im1 = Image.open(im1_file)
    im2 = Image.open(im2_file)
    
    if im1.size[0] > im1.size[1]:
        im1 = im1.rotate(90, expand = True)
    if im2.size[0] > im2.size[1]:
        im2 = im2.rotate(90, expand = True)
    
    # resize for same width
    im2_to_im1_ratio = im1.size[0]/im2.size[0]
    im2 = im2.resize((int(im2_to_im1_ratio*im2.size[0]), int(im2_to_im1_ratio*im2.size[1])), PIL.Image.LANCZOS)
    
    # get tallest
    if im1.size[1] > im2.size[1]:
        extra_height = im1.size[1] > im2.size[1]
        im2 = add_margin(im2, extra_height, 0, 0, 0, color = (0,0,0))
    if im2.size[1] > im1.size[1]:
        extra_height = im2.size[1] > im1.size[1]
        im1 = add_margin(im1, extra_height, 0, 0, 0, color = (0,0,0))
        
    # pad other to same height
    
    w = im1.size[0] + im2.size[0]
    h = max(im1.size[1], im2.size[1])
    im = Image.new("RGBA", (w, h))

    im.paste(im1)
    im.paste(im2, (im1.size[0], 0))
    im = im.convert("RGB")
    
    return im

# Resize/rotate
out = im.resize((128, 128))
out = im.rotate(90) # degrees counter-clockwise

print(out)

```

```{python}

## Get pairs of images (datetime order)

## Use pathlib
photos = Path("photos")

old_photo_names = list(photos.glob('**/*.jpg'))

new_photo_names = [re.sub("IMG_","",photo_name.name) for photo_name in old_photo_names]
## OR SORT PHOTOS BY DATE/TIME?????


```

```{python}

len(set(new_photo_names))

```

```{python}

i = 0

for a in chunks(old_photo_names, 2):
    im = merge(*a)
    i = i + 1
    im.save(f"C:/Users/BryanW/local_dev/photo-quarto/photos-out/merged_out_{i}.jpg")
    # if i == 20:
    #     break

```
